// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var Block          = require("bs-platform/lib/js/block.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var Login          = require("./login.js");
var TextRe         = require("bs-react-native/lib/js/src/components/textRe.js");
var Pervasives     = require("bs-platform/lib/js/pervasives.js");
var ReactNative    = require("bs-react-native/lib/js/src/reactNative.js");
var ReasonReact    = require("reason-react/lib/js/src/reasonReact.js");
var StackNavigator = require("../reason-react-native-navigation/src/StackNavigator.js");

function compare(a, b) {
  if (a) {
    if (b) {
      return +(a[0] === b[0]);
    } else {
      return /* false */0;
    }
  } else if (b) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

var StackNavigator$1 = StackNavigator.Make(/* module */[/* compare */compare]);

var component = ReasonReact.reducerComponent("App");

function renderScreen(count, increment, decrement, push, screen) {
  if (screen) {
    return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* array */[
                      Login.render(increment, decrement, (function () {
                              return Curry._1(push, /* MainScreen */[count]);
                            })),
                      ReasonReact.element(/* None */0, /* None */0, TextRe.Text[/* make */0](/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[Pervasives.string_of_int(screen[0])], /* array */[]))
                    ]
                  ]));
  } else {
    return Login.render(increment, decrement, (function () {
                  return Curry._1(push, /* MainScreen */[count]);
                }));
  }
}

function headerTitle(screen) {
  if (screen) {
    return "MainScreen";
  } else {
    return "Login";
  }
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var state = param[/* state */4];
      var reduce = param[/* reduce */3];
      var partial_arg = Curry._1(reduce, (function (e) {
              return /* Push */[e];
            }));
      var partial_arg$1 = Curry._1(reduce, (function () {
              return /* Decrement */2;
            }));
      var partial_arg$2 = Curry._1(reduce, (function () {
              return /* Increment */1;
            }));
      var partial_arg$3 = state[/* count */1];
      var eta = Curry._4(StackNavigator$1[/* make */17], state[/* navigationState */0], (function (param) {
              return renderScreen(partial_arg$3, partial_arg$2, partial_arg$1, partial_arg, param);
            }), headerTitle, Curry._1(reduce, (function () {
                  return /* Pop */0;
                })));
      return ReasonReact.element(/* None */0, /* None */0, eta);
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* navigationState : :: */[
                /* Login */0,
                /* [] */0
              ],
              /* count */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        switch (action) {
          case 0 : 
              var match = state[/* navigationState */0];
              if (match) {
                return /* Update */Block.__(0, [/* record */[
                            /* navigationState */match[1],
                            /* count */state[/* count */1]
                          ]]);
              } else {
                return /* NoUpdate */0;
              }
          case 1 : 
              return /* Update */Block.__(0, [/* record */[
                          /* navigationState */state[/* navigationState */0],
                          /* count */state[/* count */1] + 1 | 0
                        ]]);
          case 2 : 
              return /* Update */Block.__(0, [/* record */[
                          /* navigationState */state[/* navigationState */0],
                          /* count */state[/* count */1] - 1 | 0
                        ]]);
          
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* navigationState : :: */[
                      action[0],
                      state[/* navigationState */0]
                    ],
                    /* count */state[/* count */1]
                  ]]);
      }
    });
  return newrecord;
}

var root = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.children);
      }));

exports.compare        = compare;
exports.StackNavigator = StackNavigator$1;
exports.component      = component;
exports.renderScreen   = renderScreen;
exports.headerTitle    = headerTitle;
exports.make           = make;
exports.root           = root;
/* StackNavigator Not a pure module */
