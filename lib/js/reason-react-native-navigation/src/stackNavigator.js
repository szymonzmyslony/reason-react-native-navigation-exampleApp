// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var List                 = require("bs-platform/lib/js/list.js");
var $$Array              = require("bs-platform/lib/js/array.js");
var Block                = require("bs-platform/lib/js/block.js");
var Curry                = require("bs-platform/lib/js/curry.js");
var Header               = require("./header.js");
var RNEvent              = require("bs-react-native/lib/js/src/RNEvent.js");
var StyleRe              = require("bs-react-native/lib/js/src/styleRe.js");
var Caml_obj             = require("bs-platform/lib/js/caml_obj.js");
var AnimatedRe           = require("bs-react-native/lib/js/src/animatedRe.js");
var Pervasives           = require("bs-platform/lib/js/pervasives.js");
var PlatformRe           = require("bs-react-native/lib/js/src/platformRe.js");
var ReactNative          = require("bs-react-native/lib/js/src/reactNative.js");
var ReasonReact          = require("reason-react/lib/js/src/reasonReact.js");
var ReactNative$1        = require("react-native");
var AnimatedComponentsRe = require("bs-react-native/lib/js/src/components/animatedComponentsRe.js");

function Make() {
  var computedStyle = function (position, index, width, length) {
    var index$1 = index;
    var commonStyle_000 = StyleRe.flex(1);
    var commonStyle_001 = /* :: */[
      StyleRe.backgroundColor("#E9E9EF"),
      /* :: */[
        StyleRe.bottom(0),
        /* :: */[
          StyleRe.left(0),
          /* :: */[
            StyleRe.position(/* absolute */-1013592457),
            /* :: */[
              StyleRe.right(0),
              /* :: */[
                StyleRe.shadowColor("black"),
                /* :: */[
                  StyleRe.shadowOffset(0, 0),
                  /* :: */[
                    StyleRe.shadowOpacity(0.2),
                    /* :: */[
                      StyleRe.shadowRadius(5),
                      /* :: */[
                        StyleRe.top(0),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ];
    var commonStyle = /* :: */[
      commonStyle_000,
      commonStyle_001
    ];
    if (PlatformRe.os !== 0) {
      return StyleRe.style(/* :: */[
                  StyleRe.opacityInterpolated(AnimatedRe.Value[/* interpolate */10](position, /* :: */[
                            index$1 - 1,
                            /* :: */[
                              index$1,
                              /* :: */[
                                index$1 + 0.99,
                                /* :: */[
                                  index$1 + 1,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ], /* `float */[
                            43435420,
                            /* :: */[
                              0,
                              /* :: */[
                                1,
                                /* :: */[
                                  1,
                                  /* :: */[
                                    0,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)),
                  /* :: */[
                    StyleRe.transformInterpolated(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[AnimatedRe.Value[/* interpolate */10](position, /* :: */[
                                index$1 - 1,
                                /* :: */[
                                  index$1,
                                  /* :: */[
                                    index$1 + 0.99,
                                    /* :: */[
                                      index$1 + 1,
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ], /* `float */[
                                43435420,
                                /* :: */[
                                  50,
                                  /* :: */[
                                    0,
                                    /* :: */[
                                      0,
                                      /* :: */[
                                        0,
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* () */0),
                    commonStyle
                  ]
                ]);
    } else {
      return StyleRe.style(/* :: */[
                  StyleRe.opacityInterpolated(AnimatedRe.Value[/* interpolate */10](position, /* :: */[
                            index$1 - 1,
                            /* :: */[
                              index$1 - 0.99,
                              /* :: */[
                                index$1,
                                /* :: */[
                                  index$1 + 0.99,
                                  /* :: */[
                                    index$1 + 1,
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ], /* `float */[
                            43435420,
                            /* :: */[
                              0,
                              /* :: */[
                                1,
                                /* :: */[
                                  1,
                                  /* :: */[
                                    0.85,
                                    /* :: */[
                                      0,
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)),
                  /* :: */[
                    index === (length - 1 | 0) ? StyleRe.transformInterpolated(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[AnimatedRe.Value[/* interpolate */10](position, /* :: */[
                                  index$1 - 1,
                                  /* :: */[
                                    index$1,
                                    /* [] */0
                                  ]
                                ], /* `float */[
                                  43435420,
                                  /* :: */[
                                    width,
                                    /* :: */[
                                      0,
                                      /* [] */0
                                    ]
                                  ]
                                ], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* None */0, /* () */0) : StyleRe.transformInterpolated(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[AnimatedRe.Value[/* interpolate */10](position, /* :: */[
                                  index$1,
                                  /* :: */[
                                    index$1 + 1,
                                    /* [] */0
                                  ]
                                ], /* `float */[
                                  43435420,
                                  /* :: */[
                                    0,
                                    /* :: */[
                                      -150,
                                      /* [] */0
                                    ]
                                  ]
                                ], /* None */0, /* None */0, /* None */0, /* None */0, /* () */0)], /* None */0, /* None */0, /* None */0, /* () */0),
                    commonStyle
                  ]
                ]);
    }
  };
  var onLayout = function ($$event) {
    var width = RNEvent.NativeLayoutEvent[/* layout */0]($$event)[/* width */2];
    return /* UpdateWidth */Block.__(0, [width]);
  };
  var renderCard = function (handlers, position, width, length, index, screen) {
    var computed = computedStyle(position, index, width, length);
    return ReasonReact.element(/* Some */[Pervasives.string_of_int(index)], /* None */0, Curry.app(AnimatedComponentsRe.View[/* make */0], [
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* Some */[handlers],
                    /* None */0,
                    /* None */0,
                    /* Some */[computed],
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* array */[screen]
                  ]));
  };
  var renderCardStack = function (handlers, position, screens, width) {
    var partial_arg = List.length(screens);
    return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* Some */[StyleRe.style(/* :: */[
                            StyleRe.flex(1),
                            /* [] */0
                          ])],
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* array */[$$Array.of_list(List.mapi((function (param, param$1) {
                                  return renderCard(handlers, position, width, partial_arg, param, param$1);
                                }), screens))]
                  ]));
  };
  var renderIOS = function (handlers, width, position, screens, titles, goBack) {
    return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* Some */[StyleRe.style(/* :: */[
                            StyleRe.flexDirection(/* columnReverse */135477484),
                            /* :: */[
                              StyleRe.flex(1),
                              /* [] */0
                            ]
                          ])],
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* array */[
                      renderCardStack(handlers, position, screens, width),
                      Header.IOS[/* render */2](position, titles, goBack)
                    ]
                  ]));
  };
  var renderCardAndroid = function (handlers, position, width, index, screen, titles) {
    var computed = computedStyle(position, index, width, 0);
    var title = List.nth(titles, index);
    return ReasonReact.element(/* Some */[Pervasives.string_of_int(index)], /* None */0, Curry.app(AnimatedComponentsRe.View[/* make */0], [
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* Some */[handlers],
                    /* None */0,
                    /* None */0,
                    /* Some */[computed],
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* array */[
                      Header.Android[/* render */1](title),
                      screen
                    ]
                  ]));
  };
  var renderAndroid = function (handlers, width, position, screens, titles) {
    return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* Some */[StyleRe.style(/* :: */[
                            StyleRe.flex(1),
                            /* [] */0
                          ])],
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* array */[$$Array.of_list(List.mapi((function (param) {
                                  return (function (param$1) {
                                      var param$2 = param$1;
                                      var param$3 = titles;
                                      var param$4 = param;
                                      var param$5 = param$2;
                                      var param$6 = param$3;
                                      return renderCardAndroid(handlers, position, width, param$4, param$5, param$6);
                                    });
                                }), screens))]
                  ]));
  };
  var animateScreen = function (duration, callback, position, index, $staropt$star, _) {
    var toValue = $staropt$star ? $staropt$star[0] : /* `raw */[
        5690856,
        index
      ];
    return AnimatedRe.CompositeAnimation[/* start */1](Curry.app(AnimatedRe.Value[/* Timing */19][/* animate */0], [
                    position,
                    toValue,
                    /* None */0,
                    /* Some */[duration],
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* None */0,
                    /* () */0
                  ]), callback, /* () */0);
  };
  var reset = function (resetToIndex, duration, position) {
    return animateScreen(duration, /* None */0, position, resetToIndex, /* None */0, /* () */0);
  };
  var goBackCard = function (pop, backFromIndex, duration, position) {
    var toValue_001 = Pervasives.max(backFromIndex - 1 | 0, 0);
    var toValue = /* `raw */[
      5690856,
      toValue_001
    ];
    var callback = function () {
      Curry._1(pop, /* () */0);
      return /* () */0;
    };
    return animateScreen(duration, /* Some */[callback], position, backFromIndex, /* Some */[toValue], /* () */0);
  };
  var component = ReasonReact.reducerComponent("AppNavigator");
  var make = function (navigationState, render, getHeaderConfig, goBack) {
    return /* record */[
            /* debugName */component[/* debugName */0],
            /* reactClassInternal */component[/* reactClassInternal */1],
            /* handedOffState */component[/* handedOffState */2],
            /* willReceiveProps */(function (param) {
                var state = param[/* state */4];
                var oldLength = List.length(state[/* onScreenNavigationState */2]);
                var newLength = List.length(navigationState);
                if (oldLength < newLength) {
                  return /* record */[
                          /* width */state[/* width */0],
                          /* position */state[/* position */1],
                          /* onScreenNavigationState */navigationState,
                          /* onBackAndroid */state[/* onBackAndroid */3]
                        ];
                } else if (oldLength > newLength || List.fold_left2((function (acc, x1, x2) {
                          return acc ? Caml_obj.caml_equal(x1, x2) : /* false */0;
                        }), /* true */1, state[/* onScreenNavigationState */2], navigationState)) {
                  return state;
                } else {
                  return /* record */[
                          /* width */state[/* width */0],
                          /* position */state[/* position */1],
                          /* onScreenNavigationState */navigationState,
                          /* onBackAndroid */state[/* onBackAndroid */3]
                        ];
                }
              }),
            /* didMount */(function (param) {
                var state = param[/* state */4];
                var backAndroid = function () {
                  Curry._1(goBack, /* () */0);
                  return /* true */1;
                };
                var state_000 = /* width */state[/* width */0];
                var state_001 = /* position */state[/* position */1];
                var state_002 = /* onScreenNavigationState */state[/* onScreenNavigationState */2];
                var state_003 = /* onBackAndroid : Some */[backAndroid];
                var state$1 = /* record */[
                  state_000,
                  state_001,
                  state_002,
                  state_003
                ];
                ReactNative$1.BackHandler.addEventListener("hardwareBackPressReasonNative", backAndroid);
                return /* Update */Block.__(0, [state$1]);
              }),
            /* didUpdate */(function (param) {
                var match = param[/* newSelf */1];
                var onScreenNavigationState = param[/* oldSelf */0][/* state */4][/* onScreenNavigationState */2];
                var oldLength = List.length(onScreenNavigationState);
                var newLength = List.length(navigationState);
                if (oldLength === newLength) {
                  return /* () */0;
                } else {
                  var match$1 = +(oldLength <= newLength);
                  var callback = match$1 !== 0 ? /* None */0 : /* Some */[Curry._1(match[/* reduce */3], (function () {
                              return /* UpdateOnScreenState */Block.__(1, [
                                        navigationState,
                                        onScreenNavigationState
                                      ]);
                            }))];
                  return animateScreen(300, callback, match[/* state */4][/* position */1], newLength - 1 | 0, /* None */0, /* () */0);
                }
              }),
            /* willUnmount */(function (param) {
                var match = param[/* state */4][/* onBackAndroid */3];
                if (match) {
                  ReactNative$1.BackHandler.removeEventListener("hardwareBackPressReasonNative", match[0]);
                  return /* () */0;
                } else {
                  return /* () */0;
                }
              }),
            /* willUpdate */component[/* willUpdate */7],
            /* shouldUpdate */component[/* shouldUpdate */8],
            /* render */(function (param) {
                var state = param[/* state */4];
                var onScreenNavigationState = state[/* onScreenNavigationState */2];
                var position = state[/* position */1];
                var index = List.length(onScreenNavigationState) - 1 | 0;
                var panResponder = Curry.app(ReactNative.PanResponder[/* create */1], [
                      /* Some */[Curry._1(ReactNative.PanResponder[/* callback */0], (function ($$event, gesture) {
                                var pageX = RNEvent.NativeEvent[/* pageX */4]($$event);
                                var currentDragDistance = gesture[/* dx */5];
                                var screenEdgeDistance = pageX - currentDragDistance;
                                var gestureResponseDistance = 75;
                                if (screenEdgeDistance > gestureResponseDistance) {
                                  return /* false */0;
                                } else {
                                  var hasDraggedEnough = +(Math.abs(currentDragDistance) > 20);
                                  var isOnFirstCard = +(index === 0);
                                  if (hasDraggedEnough) {
                                    return 1 - isOnFirstCard;
                                  } else {
                                    return /* false */0;
                                  }
                                }
                              }))],
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* None */0,
                      /* Some */[Curry._1(ReactNative.PanResponder[/* callback */0], (function (_, gesture) {
                                var axisDistance = state[/* width */0];
                                var movedDistance = gesture[/* dx */5];
                                var gestureVelocity = gesture[/* vx */7];
                                var defaultVelocity = axisDistance / 300;
                                var velocity = Pervasives.max(Math.abs(gestureVelocity), defaultVelocity);
                                var resetDuration = movedDistance / velocity;
                                var goBackDuration = (axisDistance - movedDistance) / velocity;
                                if (gestureVelocity < -0.5 || !(gestureVelocity > 1 || movedDistance > axisDistance / 2)) {
                                  return reset(index, resetDuration, position);
                                } else {
                                  return goBackCard(goBack, index, goBackDuration, position);
                                }
                              }))],
                      /* Some */[/* `callback */[
                          -16344635,
                          Curry._1(ReactNative.PanResponder[/* callback */0], (function (_, gesture) {
                                  var startValue = index;
                                  var axisDistance = state[/* width */0];
                                  if (gesture[/* dx */5] > 0) {
                                    var currentValue = (startValue - gesture[/* dx */5]) / axisDistance;
                                    var value = index + currentValue;
                                    return AnimatedRe.Value[/* setValue */1](position, value);
                                  } else {
                                    return 0;
                                  }
                                }))
                        ]],
                      /* Some */[Curry._1(ReactNative.PanResponder[/* callback */0], (function (_, _$1) {
                                return reset(index, 300, position);
                              }))],
                      /* Some */[Curry._1(ReactNative.PanResponder[/* callback */0], (function (_, _$1) {
                                return /* false */0;
                              }))],
                      /* None */0,
                      /* () */0
                    ]);
                if (onScreenNavigationState) {
                  var f = PlatformRe.os !== 0 ? renderAndroid : (function (param) {
                        return (function (param$1) {
                            var func = function (param$2, param$3, param$4, param$5) {
                              var param$6 = param$1;
                              var param$7 = param$2;
                              var param$8 = param$3;
                              var param$9 = param$4;
                              var param$10 = param$5;
                              return renderIOS(param, param$6, param$7, param$8, param$9, param$10);
                            };
                            return (function (param) {
                                var func$1 = Curry._1(func, param);
                                return (function (param) {
                                    var func$2 = Curry._1(func$1, param);
                                    return (function (param) {
                                        return Curry._2(func$2, param, goBack);
                                      });
                                  });
                              });
                          });
                      });
                  return ReasonReact.element(/* None */0, /* None */0, Curry.app(ReactNative.View[/* make */0], [
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* Some */[Curry._1(param[/* reduce */3], onLayout)],
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* Some */[StyleRe.style(/* :: */[
                                          StyleRe.flex(1),
                                          /* [] */0
                                        ])],
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* None */0,
                                  /* array */[Curry._5(f, Curry._1(ReactNative.PanResponder[/* panHandlers */2], panResponder), state[/* width */0], position, List.rev_map(render, onScreenNavigationState), List.rev_map(getHeaderConfig, onScreenNavigationState))]
                                ]));
                } else {
                  return null;
                }
              }),
            /* initialState */(function () {
                return /* record */[
                        /* width */0,
                        /* position */AnimatedRe.Value[/* create */0](0),
                        /* onScreenNavigationState */navigationState,
                        /* onBackAndroid : None */0
                      ];
              }),
            /* retainedProps */component[/* retainedProps */11],
            /* reducer */(function (action, state) {
                if (action.tag) {
                  if (action[1] === state[/* onScreenNavigationState */2]) {
                    return /* Update */Block.__(0, [/* record */[
                                /* width */state[/* width */0],
                                /* position */state[/* position */1],
                                /* onScreenNavigationState */action[0],
                                /* onBackAndroid */state[/* onBackAndroid */3]
                              ]]);
                  } else {
                    return /* NoUpdate */0;
                  }
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* width */action[0],
                              /* position */state[/* position */1],
                              /* onScreenNavigationState */state[/* onScreenNavigationState */2],
                              /* onBackAndroid */state[/* onBackAndroid */3]
                            ]]);
                }
              }),
            /* jsElementWrapped */component[/* jsElementWrapped */13]
          ];
  };
  return /* module */[
          /* animationDuration */300,
          /* positionThreshold */0.5,
          /* responeThreshold */20,
          /* gestureDistanceHorizontal */75,
          /* gestureDistanceVertical */135,
          /* computedStyle */computedStyle,
          /* onLayout */onLayout,
          /* renderCard */renderCard,
          /* renderCardStack */renderCardStack,
          /* renderIOS */renderIOS,
          /* renderCardAndroid */renderCardAndroid,
          /* renderAndroid */renderAndroid,
          /* animateScreen */animateScreen,
          /* reset */reset,
          /* goBackCard */goBackCard,
          /* component */component,
          /* make */make
        ];
}

exports.Make = Make;
/* Header Not a pure module */
